AWSTemplateFormatVersion: 2010-09-09
Description: CI/CD pipeline for github projects

Resources:
  # LambdaFunction:
  #   Type: 'AWS::Lambda::Function'
  #   Properties:
  #     Code:
  #       ZipFile: |
  #         console.log('Loading DynamoDB Lambda function');
  #         var AWS = require('aws-sdk');
  #         var dynamo = new AWS.DynamoDB.DocumentClient();
  #         exports.handler = function(event, context, callback) {
  #         //console.log('Received event:', JSON.stringify(event, null, 2));
  #         var operation = event.operation;
  #         if (event.tableName) {
  #           event.payload.TableName = event.tableName;
  #         }
  #         switch (operation) {
  #               case 'create':
  #                   dynamo.put(event.payload, callback);
  #                   break;
  #               case 'read':
  #                   dynamo.get(event.payload, callback);
  #                   break;
  #               case 'update':
  #                   dynamo.update(event.payload, callback);
  #                   break;
  #               case 'delete':
  #                   dynamo.delete(event.payload, callback);
  #                   break;
  #               case 'list':
  #                   dynamo.scan(event.payload, callback);
  #                   break;
  #               default:
  #                   callback('Unknown operation: ${operation}');
  #         }
  #         };
  #     FunctionName:
  #       Ref: LambdaFuncName
  #     Handler: index.handler
  #     Runtime: python3.7
  #     Role: !GetAtt IAMRole.Arn
  #   DependsOn:
  #     - DynamoDBTable
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName:
        Ref: DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: "firstname"
          AttributeType: "S"
        - AttributeName: "secondname"
          AttributeType: "S"
        # - AttributeName: "telephone"
        #   AttributeType: "S"
        # - AttributeName: "telephonepswd"
        #   AttributeType: "N"                              
      KeySchema:
        - AttributeName: "firstname"
          KeyType: "HASH"
        - AttributeName: "secondname"
          KeyType: "RANGE"         
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
    DependsOn:
      - IAMRole

  # APIGatewayRestAPI:
  #   Type: 'AWS::ApiGateway::RestApi'
  #   Properties:
  #     Name:
  #       Ref: APIName
  #   DependsOn:
  #     - LambdaFunction
  # APIGatewayResource:
  #   Type: 'AWS::ApiGateway::Resource'
  #   Properties:
  #     RestApiId: !Ref APIGatewayRestAPI
  #     ParentId: !GetAtt
  #       - APIGatewayRestAPI
  #       - RootResourceId
  #     PathPart:
  #       Ref: LambdaFuncName
  #   DependsOn:
  #     - APIGatewayRestAPI
  # APIGatewayMethod:
  #   Type: 'AWS::ApiGateway::Method'
  #   Properties:
  #     RestApiId: !Ref APIGatewayRestAPI
  #     ResourceId: !Ref APIGatewayResource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     MethodResponses:
  #       - StatusCode: 200
  #     Integration:
  #       Type: AWS
  #       IntegrationResponses:
  #         - StatusCode: 200
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub
  #         - >-
  #           arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
  #         - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
  #   DependsOn:
  #     - APIGatewayResource
  # APIGatewayDeployment:
  #   Type: 'AWS::ApiGateway::Deployment'
  #   Properties:
  #     RestApiId: !Ref APIGatewayRestAPI
  #     StageName:
  #       Ref: EnvironmentName
  #   DependsOn:
  #     - APIGatewayMethod
  # APIGatewayPermission:
  #   Type: 'AWS::Lambda::Permission'
  #   Properties:
  #     Action: 'lambda:InvokeFunction'
  #     FunctionName: !GetAtt LambdaFunction.Arn
  #     Principal: apigateway.amazonaws.com
  #   DependsOn:
  #     - APIGatewayDeployment
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
Parameters:
  LambdaFuncName:
    Type: String
    Default: Lambda_api-lambda-db
  DynamoDBTableName:
    Type: String
    Default: Dynamo_api-lambda-db
  APIName:
    Type: String
    Default: API_api-lambda-db
  EnvironmentName:
    Type: String
    Default: Prod

# Parameters:
#   GitHubOwner:
#     Type: String
#     AllowedPattern: '[A-Za-z0-9-]+'
#     Default: divyabhansali
#   GitHubRepository:
#     Type: String
#     AllowedPattern: '[A-Za-z0-9-]+'
#   GitHubBranch:
#     Type: String
#     AllowedPattern: '[A-Za-z0-9-]+'
#     Default: master
#   CodeBuildEnvironmentImage:
#     Type: String
#     Default: 'aws/codebuild/standard:4.0'
  
# Resources:
#   SecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties: 
#       GroupDescription: Security
#       GroupName: Security
  
#   LambdaRun:
#     Type: AWS::Lambda::Function
#     Properties: 
#       Architectures: 
#         - String
#       Code: 
#         Code
#       CodeSigningConfigArn: String
#       DeadLetterConfig: 
#         DeadLetterConfig
#       Description: String
#       Environment: 
#         Environment
#       FileSystemConfigs: 
#         - FileSystemConfig
#       FunctionName: String
#       Handler: String
#       ImageConfig: 
#         ImageConfig
#       KmsKeyArn: String
#       Layers: 
#         - String
#       MemorySize: Integer
#       PackageType: String
#       ReservedConcurrentExecutions: Integer
#       Role: String
#       Runtime: String
#       Tags: 
#         - Tag
#       Timeout: Integer
#       TracingConfig: 
#         TracingConfig
#       VpcConfig: 
#         VpcConfig


  # CodeBuildServiceRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: codebuild.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Sid: CloudWatchLogsPolicy
  #               Effect: Allow
  #               Action:
  #                 - 'logs:CreateLogGroup'
  #                 - 'logs:CreateLogStream'
  #                 - 'logs:PutLogEvents'
  #               Resource: '*'
  #             - Sid: S3GetObjectPolicy
  #               Effect: Allow
  #               Action:
  #                 - 's3:GetObject'
  #                 - 's3:GetObjectVersion'
  #               Resource: '*'
  #             - Sid: S3PutObjectPolicy
  #               Effect: Allow
  #               Action:
  #                 - 's3:PutObject'
  #               Resource: '*'
  #             - Sid: S3BucketIdentity
  #               Effect: Allow 
  #               Action:
  #                 - 's3:GetBucketAcl'
  #                 - 's3:GetBucketLocation'
  #               Resource: '*'

  # CodeBuildSourceCredential:
  #   Type: 'AWS::CodeBuild::SourceCredential'
  #   Properties:
  #     AuthType: PERSONAL_ACCESS_TOKEN
  #     ServerType: GITHUB
  #     Token: >-
  #       {{resolve:secretsmanager:GITHUB_ACCESS:SecretString:GITHUB_ACCESS_TOKEN}}

  # CodeBuildProject:
  #   Type: 'AWS::CodeBuild::Project'
  #   Properties:
  #     Name: !Ref 'AWS::StackName'
  #     ServiceRole: !GetAtt 
  #       - CodeBuildServiceRole
  #       - Arn
  #     Source:
  #       Type: GITHUB
  #       Location: !Sub 'https://github.com/${GitHubOwner}/${GitHubRepository}.git'
  #       BuildSpec: buildspec.yaml
  #       Auth:
  #         Type: OAUTH
  #         Resource: !Ref CodeBuildSourceCredential
  #     Artifacts:
  #       Type: NO_ARTIFACTS
  #     Triggers:
  #       Webhook: true
  #       FilterGroups:
  #         - - Type: EVENT
  #             Pattern: >-
  #               PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED,
  #               PULL_REQUEST_REOPENED
  #           - Type: BASE_REF
  #             Pattern: !Sub '^refs/heads/${GitHubBranch}$'
  #     Environment:
  #       Type: LINUX_CONTAINER
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: !Ref CodeBuildEnvironmentImage


  # CodeBuildProjectDeployDev:
  #   Type: 'AWS::CodeBuild::Project'
  #   Properties:
  #     Name: !Sub '${AWS::StackName}-deploy-dev'
  #     ServiceRole: !GetAtt 
  #       - CodeBuildServiceRole
  #       - Arn
  #     Source:
  #       Type: CODEPIPELINE
  #       Buildspec: template.yaml
  #     Artifacts:
  #       Type: CODEPIPELINE
  #     Environment:
  #       Type: LINUX_CONTAINER
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: !Ref CodeBuildEnvironmentImage
  #       EnvironmentVariables:
  #         - Name: ENV_NAME
  #           Value: dev

  # CodeBuildProjectDeployProd:
  #   Type: 'AWS::CodeBuild::Project'
  #   Properties:
  #     Name: !Sub '${AWS::StackName}-deploy-prod'
  #     ServiceRole: !GetAtt 
  #       - CodeBuildServiceRole
  #       - Arn
  #     Source:
  #       Type: CODEPIPELINE
  #       Buildspec: template.yaml        
  #     Artifacts:
  #       Type: CODEPIPELINE
  #     Environment:
  #       Type: LINUX_CONTAINER
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: !Ref CodeBuildEnvironmentImage
  #       EnvironmentVariables:
  #         - Name: ENV_NAME
  #           Value: prod


  # CodePipelineServiceRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: codepipeline.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Sid: CloudWatchLogsPolicy
  #               Effect: Allow
  #               Action:
  #                 - 'logs:CreateLogGroup'
  #                 - 'logs:CreateLogStream'
  #                 - 'logs:PutLogEvents'
  #               Resource: '*'
  #             - Sid: S3GetObjectPolicy
  #               Effect: Allow
  #               Action:
  #                 - 's3:GetObject'
  #                 - 's3:GetObjectVersion'
  #               Resource: '*'
  #             - Sid: S3PutObjectPolicy
  #               Effect: Allow
  #               Action:
  #                 - 's3:PutObject'
  #               Resource: '*'
  #             - Sid: S3BucketIdentity
  #               Effect: Allow
  #               Action:
  #                 - 's3:GetBucketAcl'
  #                 - 's3:GetBucketLocation'
  #               Resource: '*'
  #             - Sid: CodeBuildPolicy
  #               Action:
  #                 - 'codebuild:BatchGetBuilds'
  #                 - 'codebuild:StartBuild'
  #               Resource: '*'
  #               Effect: Allow

  # CodePipelineArtifactStore:
  #   Type: 'AWS::S3::Bucket'
  #   Properties:
  #     VersioningConfiguration:
  #       Status: Enabled

  # CodePipelineWebhook:
  #   Type: 'AWS::CodePipeline::Webhook'
  #   Properties:
  #     Authentication: GITHUB_HMAC
  #     AuthenticationConfiguration:
  #       SecretToken: '{{resolve:secretsmanager:GITHUB_ACCESS:SecretString:GITHUB_ACCESS_TOKEN}}'
  #     RegisterWithThirdParty: 'true'
  #     Filters:
  #       - JsonPath: $.ref
  #         MatchEquals: 'refs/heads/{Branch}'
  #       - JsonPath: $.repository.name
  #         MatchEquals: '{Repo}'
  #     TargetPipeline: !Ref CodePipeline
  #     TargetAction: Source
  #     TargetPipelineVersion: !GetAtt CodePipeline.Version
      
  # CodePipeline:
  #   Type: 'AWS::CodePipeline::Pipeline'
  #   Properties:
  #     Name: !Ref 'AWS::StackName'
  #     RoleArn: !GetAtt CodePipelineServiceRole.Arn
  #     ArtifactStore:
  #       Type: S3
  #       Location: !Ref CodePipelineArtifactStore
  #     Stages:
  #       - Name: Source
  #         Actions:
  #           - Name: Source
  #             ActionTypeId:
  #               Category: Source
  #               Owner: ThirdParty
  #               Version: 1
  #               Provider: GitHub
  #             Configuration:
  #               Owner: !Ref GitHubOwner
  #               Repo: !Ref GitHubRepository
  #               Branch: !Ref GitHubBranch
  #               PollForSourceChanges: false
  #               OAuthToken: '{{resolve:secretsmanager:GITHUB_ACCESS:SecretString:GITHUB_ACCESS_TOKEN}}'
  #             OutputArtifacts:
  #               - Name: SourceCode

  #       - Name: Build
  #         Actions:
  #           - Name: Build
  #             ActionTypeId:
  #               Category: Build
  #               Owner: AWS
  #               Provider: CodeBuild
  #               Version: '1'                
  #             Configuration:
  #               ProjectName: !Ref CodeBuildProject
  #             OutputArtifacts:
  #               - Name: BuildOutput
  #             InputArtifacts:
  #               - Name: SourceCode

  #       - Name: Dev
  #         Actions:
  #           - Name: Deploy
  #             ActionTypeId:
  #               Category: Build
  #               Owner: AWS
  #               Provider: CodeBuild
  #               Version: '1'                
  #             Configuration:
  #               ProjectName: !Ref CodeBuildProjectDeployDev
  #             InputArtifacts:
  #               - Name: BuildOutput

  #       - Name: Prod
  #         Actions:
  #           - Name: Deploy
  #             ActionTypeId:
  #               Category: Build
  #               Owner: AWS
  #               Provider: CodeBuild
  #               Version: '1'                
  #             Configuration:
  #               ProjectName: !Ref CodeBuildProjectDeployProd
  #             InputArtifacts:
  #               - Name: BuildOutput                
