AWSTemplateFormatVersion: 2010-09-09
Description: CI/CD pipeline for github projects

Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17 
        Statement: 
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: 'sts:AssumeRole'
      Policies:
          PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
              - Sid: S3GetObjectPolicy
                Effect: xAllow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Resource:
                  - '*'
              - Sid: S3PutObjectPolicy
                Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - '*'
              - Sid: S3BucketIdentity
                Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                Resource:
                  - '*'

  CodeBuildSourceCredential:
    Type: AWS::CodeBuild::SourceCredential
    Properties: 
        AuthType: PERSONAL_ACCESS_TOKEN
        ServerType: GITHUB
        Token: "{{resolve:secretsmanger:GITHUB_ACCESS:SecretString:GITHUB_ACCESS_TOKEN}}"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: !Ref AWS::StackName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: GITHUB
        Location: https://github.com/divyabhansali/github-aws-cicd.git
        BuildSpec: buildspec.yaml
        Auth:
          Type: OAUTH
          Resource: !Ref CodeBuildSourceCredential
      Artifacts: 
        Type: NO_ARTIFACTS
      Triggers:
        Webhook: true
        FilterGroups:
            - - Type: EVENT
                Pattern: 'PULL_REQUEST_CREATED,PULL_REQUEST_UPDATED'
              - Type: BASE_REF
                Pattern: !Sub ^refs/heads/main$
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
  myDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "telephone"
          AttributeType: "S"
      
      KeySchema: 
        - 
          AttributeName: "telephone"
          KeyType: "HASH"        

      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "assingment_table1" 

  LambdaFunc:
    Type: AWS::Lambda::Function
    Properties: 
      Runtime: python3.7
      FunctionName: !GetAtt LambdaFuncName
      Handler: index.handler
      Role: !GetAtt IAMRole.Arn    
      Code: 
        ZipFile: |
            import os
            import boto3
            from datetime import datetime
            def handler(event, context):
              print(event)
              client = boto3.resource('dynamodb')
              table = client.Table('assingment_table1')
              response1 = table.get_item(
                Key = {
                  'telephone' : '9909154277'
                }
              )
              print(response1['Items'])
              response2 = table.put_item(
                Item = {
                  'telephone' : '9997845855
                  'firstname' : 'divya2'
                  'lastname' : 'bhansali'
                  'telephone' : '6djdk'
                }
              )
              print(response2["ResponseMetadata"]["HTTPStatusCode"])
              return None
      Description: Lambda to interact with dynamo db table

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: doc-example-bucket-have-random-name  
      RoleName : IAMRoleS3     


  IAMRoleS3:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            NotPrincipal:
              Service:
                AWS: 'arn:aws:iam::<accountid>:root'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_s3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:List*'
                Resource: 'arn:aws:s3:::<bucket>/*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'

  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda-db
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Sid: S3GetObjectPolicy
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Resource: '*'
              - Sid: S3PutObjectPolicy
                Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: '*'
              - Sid: S3BucketIdentity
                Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                Resource: '*'                

  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name:
        Ref: APIName
    DependsOn:
      - LambdaFunction
  APIGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ParentId: !GetAtt
        - APIGatewayRestAPI
        - RootResourceId
      PathPart:
        Ref: LambdaFuncName
    DependsOn:
      - APIGatewayRestAPI
  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !Ref APIGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
    DependsOn:
      - APIGatewayResource
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethod
  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment


Parameters:
  LambdaFuncName:
    Type: String
    Default: lambda_dynamo
  DynamoDBTableName:
    Type: String
    Default: Dynamo_api-lambda-db
  APIName:
    Type: String
    Default: API_api-lambda-db    
  EnvironmentName:
    Type: String
    Default: Prod


  # lambdarole:
  #   Type : 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Sid: Stmt1633547502602
  #         Action: 'lambda:*'
  #         Effect: Allow
  #         Resource: 'arn:aws:lambda:ap-south-1:333974312216:function:demp-lambda-func'    

  # rolaIam:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     Path: /
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - "ssm:PutParameter"
  #                 - "ssm:GetParameter"
  #               Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/test/lambda*'
